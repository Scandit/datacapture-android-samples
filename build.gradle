// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        sdk = [
                "min"    : 21,
                "target" : 32,
                "compile": 32
        ]

        versions = [
                // The value of scandit_sdk_version is updated automatically in the prepare-release.py script, please do not edit manually.
                "scandit_sdk_version"       : "6.15.1",
                "android_gradle"            : "7.2.1",
                "androidx_animations"       : "1.0.0",
                "androidx_appcompat"        : "1.3.1",
                "androidx_cardview"         : "1.0.0",
                "androidx_constraintlayout" : "2.1.2",
                "androidx_lifecycle"        : "2.3.1",
                "androidx_preference"       : "1.1.1",
                "desugar"                   : "1.1.5",
                "kotlin"                    : "1.5.31",
                "java"                      : JavaVersion.VERSION_1_8,
                "material"                  : "1.3.0",
                "okhttp"                    : "4.9.0",
        ]
    }


    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:${versions.android_gradle}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    afterEvaluate {
        android {
            signingConfigs {
                release {
                    storeFile = file("keystore-scandit.jks")
                    storePassword = System.getenv("ANDROID_KEYSTORE_PASSWORD")
                    keyAlias = "scandit-release-key"
                    keyPassword = System.getenv("ANDROID_KEYSTORE_PASSWORD")
                }
            }

            buildTypes {
                release {
                    signingConfig = signingConfigs.release
                }
            }
        }
    }
}

task clean(type: Delete) {
    println("[${project.name}] Deleting ${project.buildDir}")
    delete(project.buildDir)
    delete(new File(project.projectDir, "gen/"))
}
